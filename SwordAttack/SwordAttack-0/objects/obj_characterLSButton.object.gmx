<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

// Character constants
MOVEMENT_SPEED = 3;
KNOCKBACK = 5;
FOCUS_REGEN_BASE = 1 / 6; // 5 PER SECOND

// Sprite property assignments - won't be needed once we have custom sprites
image_xscale = 3;
image_yscale = 3;
image_speed = 0;
image_angle = direction;


// character state variables
character_health = 2; //currently just tracking player hits
character_focus = 100; // this is for later
can_move = true; // applies to motion and auto-target direction changes
can_target = true;
can_attack = true;
can_block = true;
can_quickstep = true;
quick_stepping = false;
quick_step_attack = false;
attack_combo = 0; // track the number of sequential attacks for correct animation
attack_penalty = false; //
block_held = false; // set to true when block button is pressed, false when block button is released
block_lock = false; // ensures the minimum block time
invincible = false; // this stays set for the greater of minimum block time, or the time that the player holds the block button beyond minimum block time

// related objects
targetID = 0;
swordID = 0;
shieldID = 0;


// player controller input variables
deviceID = -1; // this is set by the room or when character dies and replacement is made
x_axisL = 0;
y_axisL = 0;
x_axisR = 0;
y_axisR = 0;
shoulder_r_pressed = 0;
shoulder_l_pressed = 0;
shoulder_l_released = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy Related Objects

if (swordID) {
with (swordID) instance_destroy();
}
if (shieldID) {
with (shieldID) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Quickstep
can_quickstep = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character Death

// Reset room speed to normal
rm_arena.room_speed = 30;


// later will raise an event so the controller can handle what happens, but for now
newID = instance_create(random(room_width), random(room_height), obj_character);
// set target and device for new object
newID.targetID = targetID;
newID.deviceID = deviceID;
// set new instance to be old instance's target's target
targetID.targetID = newID;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Minimum Block Time
block_lock = false;
if (!block_held) {
    if (shieldID) {
        can_attack = true;
        can_block = true;
        can_quickstep = true;
        invincible = false;
        with (shieldID) instance_destroy();
        shieldID = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Block Raise Delay
if (!shieldID) shieldID = instance_create(x, y, obj_charactershield);
invincible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack Combo Reset
attack_combo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement Reset After Attack
can_move = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recover From Being Hit
image_index = 0;
if (!shieldID) {
    invincible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack Timer Reset
can_attack = true;
can_block = true;
attack_penalty = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input, Movement, Attacking, Blocking
// player input
// left stick input
x_axisL = gamepad_axis_value(deviceID, gp_axislh); // -1 .. 1
y_axisL = gamepad_axis_value(deviceID, gp_axislv);
x_axisR = gamepad_axis_value(deviceID, gp_axisrh);
y_axisR = gamepad_axis_value(deviceID, gp_axisrv);

// slash button - Right button
shoulder_r_pressed = gamepad_button_check_pressed(deviceID, gp_shoulderr);

// blcok button - Left button
shoulder_l_pressed = gamepad_button_check_pressed(deviceID, gp_shoulderl);
shoulder_l_released = gamepad_button_check_released(deviceID, gp_shoulderl);

// dash button - 
dash_button_pressed = gamepad_button_check_pressed(deviceID, gp_face1);

if (can_target) {
    image_angle = point_direction(x,y,targetID.x,targetID.y);
}

// if quickstepping increase friction
if (speed &gt; 0) {
    friction *= 1.2;
    if (speed &lt; 15 &amp;&amp; !quick_step_attack) {
        can_attack = true;
    }
}
else { // bugs make sure still can't move or attack when not supposed to
        if (quick_stepping &amp;&amp; !swordID) {
        quick_stepping = false;
        can_move = true;
        can_block = true;
    }
}

// player moving
if (can_move) {

    if (can_quickstep &amp;&amp; dash_button_pressed) {
        // do we have quickstep input?
        if (abs(x_axisL) &gt; 0 || abs(y_axisL) &gt; 0) {
            // find the raw direction of input and adjust - 90 so up is 0 deg
            var stick_dir = point_direction(0, 0, x_axisL, y_axisL);
            // what is the difference from character direction to input direction
            var calc_dir = (image_angle - (stick_dir % 360)) * -1;
            // for 4 directions, we have ranges of 90 degrees
            // since angle 0 should be in the center of a range, we add 1/2 the range
            //calc_dir += 45;
            if (calc_dir &lt; 0) calc_dir += 360;
            calc_dir = calc_dir % 360;
            // calc_dir will be 0 if within 30 degrees either way
            if (calc_dir &lt;= 30 || calc_dir &gt;= 330) calc_dir = 0;
            // calc_dir will be 180 if within 30 degrees either way
            if (calc_dir &gt;= 150 &amp;&amp; calc_dir &lt;= 210) calc_dir = 180;
            
            // now we know the direction, but we need the magnitude for that direction
            var x_mag = 0;
            var y_mag = 0;
            
            //if ( calc_dir &amp;lt; 90 || calc_dir &amp;gt; 270) x_mag = abs(dcos(calc_dir)) * 7 / 4;
            if (calc_dir &lt; 90 || calc_dir &gt; 270) x_mag = abs(dcos(calc_dir)) * 7 / 4;
            else x_mag = abs(dcos(calc_dir)) * 3 / 2;
            y_mag = abs(dsin(calc_dir)) * 4 / 3;
            // now we have component magnitudes what is the result?
            var calc_mag = point_distance(0,0,x_mag, y_mag);
            // now we have a direction and a magnitude for movement in relation to image_direction
            motion_set((image_angle + calc_dir), 15 * calc_mag);
            // set starting friction and then each step it will increase
            friction = 1.5;
            quick_stepping = true;
            can_quickstep = false;
            can_move = false;
            can_attack = false;
            can_block = false;
            alarm[7] = 30;
        }
    } // end if (can_quickstep)
    
    // not quickstepping
    
    x += x_axisL * MOVEMENT_SPEED;
    y += y_axisL * MOVEMENT_SPEED;
    
    // player shield moving
    if (shieldID) {
        shieldID.x += x_axisL * MOVEMENT_SPEED;
        shieldID.y += y_axisL * MOVEMENT_SPEED;
        shieldID.image_angle = image_angle + 90;
    }    
}

// player and sword moving
if (swordID) {
    // advance to target while attacking as long as not quickstepping
    if(!quick_step_attack) {
        var x_adj;
        var y_adj;
        if (swordID.hit_shield) {
            var x_adj = dcos(image_angle - 180) * mult * MOVEMENT_SPEED;
            var y_adj = dsin(image_angle - 180) * mult * MOVEMENT_SPEED;
        }
        else {
            var mult = attack_combo * 2;
            var x_adj = dcos(image_angle) * mult * MOVEMENT_SPEED;
            var y_adj = dsin(image_angle) * mult * MOVEMENT_SPEED;
        }
        x += x_adj;
        y -= y_adj;
    }
    // always adjust sword position to player position
    swordID.x = x;
    swordID.y = y;
    swordID.image_angle = image_angle;
}

    
// player attacking
if (shoulder_r_pressed) {
    if (swordID = 0 &amp;&amp; !block_held &amp;&amp; !block_lock) {
        if (can_attack) {
            if (speed &gt; 0) quick_step_attack = true;
            can_attack = false;
            can_block = false;
            can_move = false;
            swordID = instance_create(x, y, obj_charactersword); // create a sword and keep its ID to ignore collisions
            
            /*
            Reference an object with it's object ID
            This next line translates to:
            Store this object's (character's) object ID in the parentID field
            of the object identified by swordID.
            That way, when the sword is done doing its thing, it can destroy itself and clear
            its parentID.swordID to 0;
            */
            swordID.parentID = id;
            attack_combo += 1;
            
            swordID.image_xscale = 3;
            if (attack_combo % 2 == 1) {
                swordID.image_yscale = 3;
                alarm[0] = 12; // time to reset can_attack for combo attacks
                alarm[2] = 15; // time to reset can_move
                alarm[3] = 15; // time for combo to expire
            }
            else {
                swordID.image_yscale = -3;
                alarm[0] = 30; // time to reset can_attack for combo attacks
                alarm[2] = 30; // time to reset can_move
                alarm[3] = 30; // time for combo to expire
            }

            swordID.image_angle = image_angle;

        }
        else {
            if (!attack_penalty) {
                attack_penalty = true;
                alarm[0] += 12; // extend time to reset can_attack.
                alarm[2] += 12; // still can't move
                // alarm[3] will not be reset.  Bad timing misses chance to combo
            }
        }
    }
}

// player blocking
if (shoulder_l_pressed) {
    if (can_block) {
        can_attack = false;
        can_block = false;
        can_quickstep = false;
        block_held = true;
        block_lock = true;
        alarm[4] = 4;
        alarm[5] = 16;
    }
    else if (block_lock) {
        block_held = true;
    }
}

if (shoulder_l_released) {
    block_held = false;
    if (!block_lock &amp;&amp; shieldID) {
        can_attack = true;
        can_block = true;
        // only enable quickstep if the timer is not set
        if (alarm[7] == -1) can_quickstep = true;
        invincible = false;
        with (shieldID) instance_destroy();
        shieldID = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_charactersword">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle sword collision
// make sure it's not my sword
if (other.id != swordID) {
    if (!invincible) {
        // knockback
        x += dcos(targetID.direction) * KNOCKBACK;
        y -= dsin(targetID.direction) * KNOCKBACK;
        character_health--;
        image_index = 1;
        invincible = true;
        if (character_health == 0) {
            // dead.  freeze and set a timer for cleanup event
            can_move = 0;
            can_attack = 0;
            var i;
            for (i = 0; i &lt; 12; i++){
                alarm[i] = -1;
            }
            alarm[6] = 7;
            // for fun, slow down room speed
            rm_arena.room_speed = 10;
        }
        else alarm[1] = 7;
    }
    else {
        // ensure block lock
        if (alarm[5] &lt; 10) {
            block_lock = true;
            alarm[5] = 15;
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
